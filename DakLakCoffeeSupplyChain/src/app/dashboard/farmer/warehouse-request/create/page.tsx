'use client';

import { useEffect, useState, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { PackagePlus, Calendar, ArrowLeft, Coffee, Scale, FileText, Package, Truck, Leaf } from 'lucide-react';
import { createWarehouseInboundRequest, getAllInboundRequestsForFarmer } from '@/lib/api/warehouseInboundRequest';
import { getAllProcessingBatches, ProcessingBatch, getAvailableBatchesForWarehouseRequest } from '@/lib/api/processingBatches';
import { getAllProcessingBatchProgresses } from '@/lib/api/processingBatchProgress';
import { getCropSeasonDetailsForCurrentFarmer } from '@/lib/api/cropSeasonDetail';
import { ProcessingStatus } from '@/lib/constants/batchStatus';
import { toast } from 'sonner';

interface AvailableBatch {
  batchId: string;
  batchCode: string;
  typeName: string;
  cropSeasonName: string;
  status: string;
  availableForNewRequest: number;
  debug: {
    finalProcessed: number;
    approvedCompletedRequests: number;
  };
}

export default function CreateDeliveryRequestPage() {
  const router = useRouter();

  // ‚úÖ T√ÅCH RI√äNG 2 FORM STATE
  const [processedForm, setProcessedForm] = useState({
    requestedQuantity: '',
    preferredDeliveryDate: '',
    note: '',
    batchId: '',
  });

  const [freshForm, setFreshForm] = useState({
    requestedQuantity: '',
    preferredDeliveryDate: '',
    note: '',
    detailId: '',
  });

  const [batches, setBatches] = useState<AvailableBatch[]>([]);
  const [cropSeasonDetails, setCropSeasonDetails] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [isLoadingBatches, setIsLoadingBatches] = useState(true);
  const [isLoadingCropDetails, setIsLoadingCropDetails] = useState(true);

  const [inboundRequests, setInboundRequests] = useState<{
    batchId: string;
    detailId: string;
    requestedQuantity: number;
    status: string | number;
  }[]>([]);
  const [availableBatchesData, setAvailableBatchesData] = useState<any[]>([]);
  const [availableCropDetailsData, setAvailableCropDetailsData] = useState<any[]>([]);

  // üëá Th√™m stepIndex ƒë·ªÉ x√°c ƒë·ªãnh b∆∞·ªõc cu·ªëi
  const [batchProgresses, setBatchProgresses] = useState<{
    batchId: string;
    outputQuantity?: number;
    outputUnit?: string;
    stageName: string;
    stepIndex: number; // NEW
  }[]>([]);

  // ‚úÖ T√ÅCH RI√äNG 2 HANDLE CHANGE
  const handleProcessedFormChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setProcessedForm((prev) => ({ ...prev, [name]: value }));

    if (name === 'preferredDeliveryDate') {
      const dateInput = document.getElementById('processedPreferredDeliveryDate') as HTMLInputElement;
      if (dateInput) {
        dateInput.setCustomValidity('');
      }
    }
  };

  const handleFreshFormChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFreshForm((prev) => ({ ...prev, [name]: value }));

    if (name === 'preferredDeliveryDate') {
      const dateInput = document.getElementById('freshPreferredDeliveryDate') as HTMLInputElement;
      if (dateInput) {
        dateInput.setCustomValidity('');
      }
    }
  };

  // S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ API available batches
  const batchesWithRemaining = useMemo(() => {
    if (!availableBatchesData || availableBatchesData.length === 0) return [];

    return availableBatchesData.map((batch: any) => {
      // T√≠nh to√°n s·ªë l∆∞·ª£ng c√≤n l·∫°i cho y√™u c·∫ßu m·ªõi
      const totalRequested = (inboundRequests || [])
        .filter((req) => req.batchId === batch.batchId)
        .reduce((sum, req) => sum + (req.requestedQuantity || 0), 0);

      const availableForNewRequest = Math.max(0, (batch.availableQuantity || 0) - totalRequested);

      return {
        batchId: batch.batchId,
        batchCode: batch.batchCode,
        typeName: batch.coffeeTypeName || 'Kh√¥ng r√µ',
        cropSeasonName: batch.cropSeasonName || 'Kh√¥ng r√µ',
        status: batch.status,
        availableForNewRequest,
        debug: {
          finalProcessed: batch.maxOutputQuantity || 0,
          totalRequested: batch.totalRequested || 0,
        },
      };
    });
  }, [availableBatchesData, inboundRequests]);

  // S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ API available crop season details
  const cropDetailsWithRemaining = useMemo(() => {
    if (!availableCropDetailsData || availableCropDetailsData.length === 0) return [];

    return availableCropDetailsData.map((detail: any) => {
      // T√≠nh to√°n s·ªë l∆∞·ª£ng c√≤n l·∫°i cho y√™u c·∫ßu m·ªõi
      const totalRequested = (inboundRequests || [])
        .filter((req) => req.detailId === detail.detailId)
        .reduce((sum, req) => sum + (req.requestedQuantity || 0), 0);

      const availableForNewRequest = Math.max(0, (detail.availableQuantity || 0) - totalRequested);

      return {
        detailId: detail.detailId,
        cropSeasonName: detail.cropSeasonName || 'Kh√¥ng r√µ',
        coffeeTypeName: detail.coffeeTypeName || 'Kh√¥ng r√µ',
        availableForNewRequest,
        debug: {
          actualYield: detail.actualYield || 0,
          totalRequested: detail.totalRequested || 0,
        },
      };
    });
  }, [availableCropDetailsData, inboundRequests]);

  // ‚úÖ T√ÅCH RI√äNG 2 HANDLE SUBMIT
  const handleProcessedSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const { requestedQuantity, preferredDeliveryDate, note, batchId } = processedForm;

      if (!batchId) {
        toast.error('B·∫°n ch∆∞a ch·ªçn l√¥ s∆° ch·∫ø');
        return;
      }

      const quantity = Number(requestedQuantity);
      if (isNaN(quantity) || quantity <= 0) {
        toast.error('S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë d∆∞∆°ng l·ªõn h∆°n 0');
        return;
      }

      // Check kh√¥ng v∆∞·ª£t qu√° c√≤n l·∫°i cho c√† ph√™ ƒë√£ s∆° ch·∫ø
      const selectedBatch = batchesWithRemaining.find((b) => b.batchId === batchId);
      if (selectedBatch && quantity > selectedBatch.availableForNewRequest) {
        toast.error(
          `S·ªë l∆∞·ª£ng y√™u c·∫ßu (${quantity}kg) v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng c√≥ th·ªÉ g·ª≠i y√™u c·∫ßu m·ªõi (${selectedBatch.availableForNewRequest}kg). T·ªïng s·ªë l∆∞·ª£ng (ƒë√£ duy·ªát + ƒëang ch·ªù + y√™u c·∫ßu m·ªõi) kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° s·∫£n l∆∞·ª£ng cu·ªëi (${selectedBatch.debug.finalProcessed}kg)`
        );
        setLoading(false);
        return;
      }

      const dateInput = document.getElementById('processedPreferredDeliveryDate') as HTMLInputElement;
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selectedDate = new Date(preferredDeliveryDate);

      if (selectedDate < today) {
        dateInput.setCustomValidity('Ng√†y giao d·ª± ki·∫øn kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n h√¥m nay.');
        dateInput.reportValidity();
        setLoading(false);
        return;
      } else {
        dateInput.setCustomValidity('');
      }

      const message = await createWarehouseInboundRequest({
        requestedQuantity: Number(requestedQuantity),
        preferredDeliveryDate,
        note,
        batchId: batchId,
        detailId: undefined, // Ch·ªâ g·ª≠i batchId cho c√† ph√™ s∆° ch·∫ø
      });

      toast.success('‚úÖ ' + message);
      router.push('/dashboard/farmer/warehouse-request');
    } catch (err: any) {
      toast.error('‚ùå L·ªói: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleFreshSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const { requestedQuantity, preferredDeliveryDate, note, detailId } = freshForm;

      if (!detailId) {
        toast.error('B·∫°n ch∆∞a ch·ªçn v√πng tr·ªìng');
        return;
      }

      const quantity = Number(requestedQuantity);
      if (isNaN(quantity) || quantity <= 0) {
        toast.error('S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë d∆∞∆°ng l·ªõn h∆°n 0');
        return;
      }

      // Check kh√¥ng v∆∞·ª£t qu√° c√≤n l·∫°i cho c√† ph√™ t∆∞∆°i
      const selectedDetail = cropDetailsWithRemaining.find((d) => d.detailId === detailId);
      if (selectedDetail && quantity > selectedDetail.availableForNewRequest) {
        toast.error(
          `S·ªë l∆∞·ª£ng y√™u c·∫ßu (${quantity}kg) v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng c√≥ th·ªÉ g·ª≠i y√™u c·∫ßu m·ªõi (${selectedDetail.availableForNewRequest}kg). T·ªïng s·ªë l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° s·∫£n l∆∞·ª£ng th·ª±c t·∫ø (${selectedDetail.debug.actualYield}kg)`
        );
        setLoading(false);
        return;
      }

      const dateInput = document.getElementById('freshPreferredDeliveryDate') as HTMLInputElement;
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selectedDate = new Date(preferredDeliveryDate);

      if (selectedDate < today) {
        dateInput.setCustomValidity('Ng√†y giao d·ª± ki·∫øn kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n h√¥m nay.');
        dateInput.reportValidity();
        setLoading(false);
        return;
      } else {
        dateInput.setCustomValidity('');
      }

      const message = await createWarehouseInboundRequest({
        requestedQuantity: Number(requestedQuantity),
        preferredDeliveryDate,
        note,
        batchId: undefined, // Ch·ªâ g·ª≠i detailId cho c√† ph√™ t∆∞∆°i
        detailId: detailId,
      });

      toast.success('‚úÖ ' + message);
      router.push('/dashboard/farmer/warehouse-request');
    } catch (err: any) {
      toast.error('‚ùå L·ªói: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        // L·∫•y danh s√°ch batches c√≥ available quantity t·ª´ API m·ªõi
        const availableBatchesData = await getAvailableBatchesForWarehouseRequest();
        console.log('üîç Available Batches for Warehouse Request:', availableBatchesData);
        
        // L∆∞u d·ªØ li·ªáu available batches
        setAvailableBatchesData(availableBatchesData || []);

        // L·∫•y danh s√°ch crop season details c√≥ th·ªÉ t·∫°o y√™u c·∫ßu nh·∫≠p kho
        const cropDetailsData = await getCropSeasonDetailsForCurrentFarmer();
        console.log('üîç Available Crop Season Details:', cropDetailsData);
        setAvailableCropDetailsData(cropDetailsData || []);

        // L·∫•y batch progresses (kh√¥ng c·∫ßn thi·∫øt n·ªØa v√¨ ƒë√£ c√≥ t·ª´ API m·ªõi)
        const progressesData = await getAllProcessingBatchProgresses();
        setBatchProgresses(progressesData || []);

        // L·∫•y inbound requests
        const requestsData = await getAllInboundRequestsForFarmer();
        if (requestsData.status === 1) {
          setInboundRequests(requestsData.data || []);
        }
      } catch (error: any) {
        console.error('Error fetching data:', error);
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói c·ª• th·ªÉ t·ª´ backend thay v√¨ th√¥ng b√°o chung
        const errorMessage = error?.message || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu';
        toast.error(errorMessage);
      } finally {
        setIsLoadingBatches(false);
        setIsLoadingCropDetails(false);
      }
    };

    fetchData();
  }, []);

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button
          variant="outline"
          size="icon"
          onClick={() => router.back()}
          className="shrink-0"
        >
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <div>
          <h1 className="text-2xl font-bold text-gray-900">T·∫°o y√™u c·∫ßu nh·∫≠p kho</h1>
          <p className="text-gray-600">G·ª≠i y√™u c·∫ßu nh·∫≠p kho c√† ph√™</p>
        </div>
      </div>

      <Tabs defaultValue="processed" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="processed" className="flex items-center gap-2">
            <Package className="h-4 w-4" />
            C√† ph√™ ƒë√£ s∆° ch·∫ø
          </TabsTrigger>
          <TabsTrigger value="fresh" className="flex items-center gap-2">
            <Leaf className="h-4 w-4" />
            C√† ph√™ t∆∞∆°i
          </TabsTrigger>
        </TabsList>
        
        {/* ‚úÖ TH√îNG B√ÅO R√ï R√ÄNG CHO T·ª™NG TAB */}
        <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="text-sm text-blue-800">
            <strong>üí° H∆∞·ªõng d·∫´n:</strong> M·ªói tab c√≥ form ri√™ng bi·ªát. Vui l√≤ng ch·ªçn ƒë√∫ng tab t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i c√† ph√™ b·∫°n mu·ªën g·ª≠i.
          </div>
          <div className="mt-2 text-xs text-blue-700">
            <strong>üîí B·∫£o m·∫≠t:</strong> M·ªói form ch·ªâ x·ª≠ l√Ω lo·∫°i c√† ph√™ t∆∞∆°ng ·ª©ng, kh√¥ng th·ªÉ nh·∫ßm l·∫´n gi·ªØa c√† ph√™ t∆∞∆°i v√† c√† ph√™ s∆° ch·∫ø.
          </div>
        </div>

        <TabsContent value="processed" className="space-y-6">
          <Card className="border-orange-200 bg-orange-50/30">
            <CardHeader className="bg-orange-100/50 border-b border-orange-200">
              <CardTitle className="flex items-center gap-2 text-orange-800">
                <Package className="h-5 w-5" />
                Y√™u c·∫ßu nh·∫≠p kho c√† ph√™ ƒë√£ s∆° ch·∫ø
              </CardTitle>
              <p className="text-sm text-orange-700">Ch·ªçn l√¥ s∆° ch·∫ø ƒë√£ ho√†n th√†nh ƒë·ªÉ g·ª≠i y√™u c·∫ßu nh·∫≠p kho</p>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleProcessedSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="processedBatchId" className="text-orange-700 font-medium">
                      Ch·ªçn l√¥ s∆° ch·∫ø * 
                      <span className="text-xs text-orange-600 ml-2">(C√† ph√™ ƒë√£ qua x·ª≠ l√Ω)</span>
                    </Label>
                    <select
                      id="processedBatchId"
                      name="batchId"
                      value={processedForm.batchId}
                      onChange={handleProcessedFormChange}
                      className="w-full p-2 border border-orange-300 rounded-md focus:border-orange-500 focus:ring-orange-200"
                      required
                    >
                      <option value="">-- Ch·ªçn l√¥ s∆° ch·∫ø --</option>
                      {batchesWithRemaining
                        .map((batch) => (
                          <option key={batch.batchId} value={batch.batchId}>
                            {batch.batchCode} - {batch.typeName || 'Kh√¥ng r√µ'} ({batch.availableForNewRequest}kg c√≤n l·∫°i)
                          </option>
                        ))}
                    </select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="processedRequestedQuantity">S·ªë l∆∞·ª£ng y√™u c·∫ßu (kg) *</Label>
                    <Input
                      id="processedRequestedQuantity"
                      name="requestedQuantity"
                      type="number"
                      value={processedForm.requestedQuantity}
                      onChange={handleProcessedFormChange}
                      placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng"
                      required
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="processedPreferredDeliveryDate">Ng√†y giao d·ª± ki·∫øn *</Label>
                    <Input
                      id="processedPreferredDeliveryDate"
                      name="preferredDeliveryDate"
                      type="date"
                      value={processedForm.preferredDeliveryDate}
                      onChange={handleProcessedFormChange}
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="processedNote">Ghi ch√∫</Label>
                    <Textarea
                      id="processedNote"
                      name="note"
                      value={processedForm.note}
                      onChange={handleProcessedFormChange}
                      placeholder="Ghi ch√∫ th√™m (n·∫øu c√≥)"
                      rows={3}
                    />
                  </div>
                </div>

                <div className="flex justify-end gap-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => router.back()}
                  >
                    H·ªßy
                  </Button>
                  <Button type="submit" disabled={loading} className="bg-orange-600 hover:bg-orange-700 text-white">
                    {loading ? 'ƒêang g·ª≠i...' : 'G·ª≠i y√™u c·∫ßu c√† ph√™ s∆° ch·∫ø'}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="fresh" className="space-y-6">
          <Card className="border-green-200 bg-green-50/30">
            <CardHeader className="bg-green-100/50 border-b border-green-200">
              <CardTitle className="flex items-center gap-2 text-green-800">
                <Leaf className="h-5 w-5" />
                Y√™u c·∫ßu nh·∫≠p kho c√† ph√™ t∆∞∆°i
              </CardTitle>
              <p className="text-sm text-green-700">Ch·ªçn v√πng tr·ªìng ƒë√£ ho√†n th√†nh ƒë·ªÉ g·ª≠i y√™u c·∫ßu nh·∫≠p kho</p>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleFreshSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="freshDetailId" className="text-green-700 font-medium">
                      Ch·ªçn v√πng tr·ªìng * 
                      <span className="text-xs text-green-600 ml-2">(C√† ph√™ t∆∞∆°i nguy√™n b·∫£n)</span>
                    </Label>
                    <select
                      id="freshDetailId"
                      name="detailId"
                      value={freshForm.detailId}
                      onChange={handleFreshFormChange}
                      className="w-full p-2 border border-green-300 rounded-md focus:border-green-500 focus:ring-green-200"
                      required
                    >
                      <option value="">-- Ch·ªçn v√πng tr·ªìng --</option>
                      {cropDetailsWithRemaining
                        .map((detail) => (
                          <option key={detail.detailId} value={detail.detailId}>
                            {detail.cropSeasonName} - {detail.coffeeTypeName} ({detail.availableForNewRequest}kg c√≤n l·∫°i)
                      </option>
                        ))}
                    </select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="freshRequestedQuantity">S·ªë l∆∞·ª£ng y√™u c·∫ßu (kg) *</Label>
                    <Input
                      id="freshRequestedQuantity"
                      name="requestedQuantity"
                      type="number"
                      value={freshForm.requestedQuantity}
                      onChange={handleFreshFormChange}
                      placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng"
                      required
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="freshPreferredDeliveryDate">Ng√†y giao d·ª± ki·∫øn *</Label>
                    <Input
                      id="freshPreferredDeliveryDate"
                      name="preferredDeliveryDate"
                      type="date"
                      value={freshForm.preferredDeliveryDate}
                      onChange={handleFreshFormChange}
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="freshNote">Ghi ch√∫</Label>
                    <Textarea
                      id="freshNote"
                      name="note"
                      value={freshForm.note}
                      onChange={handleFreshFormChange}
                      placeholder="Ghi ch√∫ th√™m (n·∫øu c√≥)"
                      rows={3}
                    />
                  </div>
                </div>

                <div className="flex justify-end gap-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => router.back()}
                  >
                    H·ªßy
                  </Button>
                  <Button type="submit" disabled={loading} className="bg-green-600 hover:bg-green-700 text-white">
                    {loading ? 'ƒêang g·ª≠i...' : 'G·ª≠i y√™u c·∫ßu c√† ph√™ t∆∞∆°i'}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
