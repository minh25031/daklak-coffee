"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { getInboundRequestDetailForFarmer } from "@/lib/api/warehouseInboundRequest";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

export default function FarmerInboundRequestDetailPage() {
  const { id } = useParams();
  const router = useRouter();
  const [data, setData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    if (!id) return;

    const fetchDetail = async () => {
      try {
        const result = await getInboundRequestDetailForFarmer(id as string);
        if (result?.status === 1) {
          setData(result.data);
        } else {
          throw new Error(result?.message || "Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu");
        }
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchDetail();
  }, [id]);

  const formatDate = (value: string | null | undefined) => {
    if (!value) return "Kh√¥ng c√≥";
    const d = new Date(value);
    return isNaN(d.getTime()) ? "Kh√¥ng x√°c ƒë·ªãnh" : d.toLocaleDateString("vi-VN");
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case "Pending":
        return "Ch·ªù duy·ªát";
      case "Approved":
        return "ƒê√£ duy·ªát";
      case "Rejected":
        return "T·ª´ ch·ªëi";
      case "Cancelled":
        return "ƒê√£ hu·ª∑";
      case "Completed":
        return "Ho√†n th√†nh";
      default:
        return status;
    }
  };

  const getStatusStyle = (status: string) => {
    switch (status) {
      case "Approved":
        return "bg-green-100 text-green-800";
      case "Rejected":
        return "bg-red-100 text-red-800";
      case "Cancelled":
        return "bg-gray-200 text-gray-700";
      case "Pending":
        return "bg-yellow-100 text-yellow-800";
      case "Completed":
        return "bg-blue-100 text-blue-800";
      default:
        return "bg-gray-100 text-gray-700";
    }
  };

  if (loading) return <p className="p-6">ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  if (error) return <p className="text-red-600 p-6">‚ùå {error}</p>;
  if (!data) return <p className="p-6">Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu</p>;

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white rounded-xl shadow space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-orange-700">
          üì¶ Chi ti·∫øt y√™u c·∫ßu nh·∫≠p kho
        </h1>
        <Button variant="outline" onClick={() => router.back()}>
          ‚Üê Quay l·∫°i danh s√°ch
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-800">
        <DetailItem label="M√£ y√™u c·∫ßu" value={data.requestCode} />
        <DetailItem
          label="Tr·∫°ng th√°i"
          value={
            <Badge className={`capitalize ${getStatusStyle(data.status)}`}>
              {getStatusLabel(data.status)}
            </Badge>
          }
        />

        <DetailItem
          label="S·ªë l∆∞·ª£ng y√™u c·∫ßu"
          value={`${data.requestedQuantity} kg`}
        />
        <DetailItem
          label="Ng√†y giao d·ª± ki·∫øn"
          value={formatDate(data.preferredDeliveryDate)}
        />

        <DetailItem
          label="Ng√†y giao th·ª±c t·∫ø"
          value={formatDate(data.actualDeliveryDate)}
        />
        <DetailItem label="Ghi ch√∫" value={data.note || "Kh√¥ng c√≥"} />

        <DetailItem label="M√£ l√¥ ch·∫ø bi·∫øn" value={data.batchCode} />
        <DetailItem label="Lo·∫°i c√† ph√™" value={data.coffeeType} />
        <DetailItem label="M√πa v·ª•" value={data.seasonCode} />
      </div>
    </div>
  );
}

function DetailItem({
  label,
  value,
}: {
  label: string;
  value: React.ReactNode;
}) {
  return (
    <div className="flex flex-col">
      <span className="text-sm font-bold text-gray-600">{label}</span>
      <span className="mt-1">{value}</span>
    </div>
  );
}
