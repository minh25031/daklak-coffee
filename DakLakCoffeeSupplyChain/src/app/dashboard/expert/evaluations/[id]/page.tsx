"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { useAuthGuard } from "@/lib/auth/useAuthGuard";
import { getProcessingBatchById, ProcessingBatch } from "@/lib/api/processingBatches";
import { getEvaluationsByBatch, createProcessingBatchEvaluation, updateProcessingBatchEvaluation, ProcessingBatchEvaluation, CreateEvaluationDto, EVALUATION_RESULTS, getEvaluationResultDisplayName, getEvaluationResultColor } from "@/lib/api/processingBatchEvaluations";
import { ProcessingStatus } from "@/lib/constants/batchStatus";
import { FiArrowLeft, FiSave, FiAlertCircle, FiCheckCircle, FiClock, FiUser, FiCalendar, FiPackage, FiBarChart2, FiX, FiPlus } from "react-icons/fi";
import * as Dialog from "@radix-ui/react-dialog";
import StageFailureDisplay from "@/components/processing-batches/StageFailureDisplay";
import EvaluationFailureInfo from "@/components/processing-batches/EvaluationFailureInfo";
import FarmerRetryStatus from "@/components/processing-batches/FarmerRetryStatus";
import RetryGuidanceInfo from "@/components/processing-batches/RetryGuidanceInfo";

export default function ExpertEvaluationDetailPage() {
  useAuthGuard(["expert"]);
  const params = useParams();
  const router = useRouter();
  const batchId = params.id as string;

  const [batch, setBatch] = useState<ProcessingBatch | null>(null);
  const [evaluations, setEvaluations] = useState<ProcessingBatchEvaluation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showEvaluationForm, setShowEvaluationForm] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  // Form state
  const [formData, setFormData] = useState<CreateEvaluationDto>({
    batchId: batchId,
    evaluationResult: EVALUATION_RESULTS.PASS,
    comments: "",
    detailedFeedback: "",
    problematicSteps: [],
    recommendations: "",
  });

  // Local state for problematic steps
  const [newProblematicStep, setNewProblematicStep] = useState("");

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log("üîç DEBUG: Fetching data for batchId:", batchId);

      const [batchData, evaluationsData] = await Promise.all([
        getProcessingBatchById(batchId),
        getEvaluationsByBatch(batchId)
      ]);

      console.log("üîç DEBUG: Batch data:", batchData);
      console.log("üîç DEBUG: Evaluations data:", evaluationsData);
      
      // üîß C·∫¢I THI·ªÜN: Debug th√¥ng tin evaluation
      if (evaluationsData && evaluationsData.length > 0) {
        const latestEval = evaluationsData[0];
        console.log("üîç DEBUG: Latest evaluation:", {
          evaluationId: latestEval.evaluationId,
          evaluationResult: latestEval.evaluationResult,
          comments: latestEval.comments,
          evaluatedAt: latestEval.evaluatedAt,
          evaluatedBy: latestEval.evaluatedBy
        });
        
        // Debug stage failure info n·∫øu c√≥
        if (latestEval.comments) {
          const { debugStageFailure } = await import('@/lib/helpers/evaluationHelpers');
          debugStageFailure(latestEval.comments, 'FetchData');
        }
      }

      if (!batchData) {
        console.log("‚ùå DEBUG: No batch data found");
        setError("Kh√¥ng t√¨m th·∫•y l√¥ s∆° ch·∫ø");
        return;
      }

      setBatch(batchData);
      setEvaluations(evaluationsData);
    } catch (err: any) {
      console.error("‚ùå L·ªói fetchData:", err);
      console.error("‚ùå Error details:", {
        message: err.message,
        status: err.response?.status,
        data: err.response?.data
      });
      setError("C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (batchId) {
      fetchData();
    }
  }, [batchId]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setSubmitting(true);
      
      // Validation
      if (formData.evaluationResult === EVALUATION_RESULTS.FAIL && 
          (!formData.problematicSteps || formData.problematicSteps.length === 0)) {
        alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ti·∫øn tr√¨nh c√≥ v·∫•n ƒë·ªÅ khi ƒë√°nh gi√° kh√¥ng ƒë·∫°t.");
        return;
      }
      
      // üîß FIX: Thay v√¨ t·∫°o evaluation m·ªõi, c·∫≠p nh·∫≠t evaluation ƒë√£ c√≥ (ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi backend)
      const latestEvaluation = evaluations.find(e => !e.evaluatedBy); // T√¨m evaluation ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√°
      
      if (!latestEvaluation) {
        alert("Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√° c·∫ßn c·∫≠p nh·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.");
        return;
      }
      
             // üîß C·∫¢I THI·ªÜN: S·ª≠ d·ª•ng helper ƒë·ªÉ t·∫°o comments theo format chu·∫©n
       let finalComments = formData.comments;
       if (formData.evaluationResult === EVALUATION_RESULTS.FAIL && formData.problematicSteps && formData.problematicSteps.length > 0) {
         // L·∫•y step ƒë·∫ßu ti√™n ƒë·ªÉ t·∫°o format chu·∫©n
         const firstStep = formData.problematicSteps[0];
         
         // S·ª≠ d·ª•ng helper ƒë·ªÉ t·∫°o stage failure info
         const { createStageFailureFromFormData, createFailureComment, debugStageFailure } = await import('@/lib/helpers/evaluationHelpers');
         
         const failureInfo = createStageFailureFromFormData(
           firstStep,
           formData.comments || 'Ti·∫øn tr√¨nh c√≥ v·∫•n ƒë·ªÅ',
           formData.recommendations || 'C·∫ßn c·∫£i thi·ªán theo h∆∞·ªõng d·∫´n'
         );
         
         if (failureInfo) {
           // T·∫°o format chu·∫©n theo helper
           finalComments = createFailureComment(
             failureInfo.failedOrderIndex,
             failureInfo.failedStageName,
             failureInfo.failureDetails,
             failureInfo.recommendations
           );
           
           // Debug log
           debugStageFailure(finalComments, 'Expert Form Submit');
         } else {
           // Fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c
           finalComments = `FAILED_STAGE_ID:1|FAILED_STAGE_NAME:Thu ho·∫°ch|DETAILS:${formData.comments || 'Ti·∫øn tr√¨nh c√≥ v·∫•n ƒë·ªÅ'}|RECOMMENDATIONS:${formData.recommendations || 'C·∫ßn c·∫£i thi·ªán theo h∆∞·ªõng d·∫´n'}`;
         }
       }
      
      // Chu·∫©n b·ªã data ƒë·ªÉ c·∫≠p nh·∫≠t evaluation
      const updateData = {
        evaluationResult: formData.evaluationResult,
        comments: finalComments,
        detailedFeedback: formData.detailedFeedback,
        problematicSteps: formData.problematicSteps && formData.problematicSteps.length > 0 
          ? formData.problematicSteps 
          : undefined,
        recommendations: formData.recommendations,
        evaluatedAt: new Date().toISOString()
      };
      
      console.log("üîç DEBUG: Original comments:", formData.comments);
      console.log("üîç DEBUG: Final comments:", finalComments);
      console.log("üîç DEBUG: Updating evaluation with data:", updateData);
      
      // G·ªçi API c·∫≠p nh·∫≠t evaluation thay v√¨ t·∫°o m·ªõi
      const result = await updateProcessingBatchEvaluation(latestEvaluation.evaluationId, updateData);
      
      console.log("üîç DEBUG: Update evaluation result:", result);
      
             if (result && result.data) {
         setShowEvaluationForm(false);
         
         // üîß C·∫¢I THI·ªÜN: Refresh data v√† ƒë·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng
         console.log("üîç DEBUG: Evaluation updated successfully, refreshing data...");
         await fetchData(); // Refresh data
         
         // üîß C·∫¢I THI·ªÜN: Hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p v·ªõi k·∫øt qu·∫£ ƒë√°nh gi√°
         if (formData.evaluationResult === EVALUATION_RESULTS.FAIL) {
           alert("ƒê√°nh gi√° kh√¥ng ƒë·∫°t ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. N√¥ng d√¢n s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o v·ªÅ c√°c v·∫•n ƒë·ªÅ c·∫ßn c·∫£i thi·ªán.");
         } else {
           alert("ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
         }
       } else {
         console.error("‚ùå DEBUG: No result or no data in result");
         alert("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ƒë√°nh gi√°");
       }
    } catch (err: any) {
      console.error("‚ùå L·ªói handleSubmit:", err);
      console.error("‚ùå Error details:", {
        message: err.message,
        status: err.response?.status,
        data: err.response?.data
      });
      
      // Hi·ªÉn th·ªã l·ªói chi ti·∫øt h∆°n
      const errorMessage = err.message || "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ƒë√°nh gi√°";
      alert(`L·ªói: ${errorMessage}`);
    } finally {
      setSubmitting(false);
    }
  };

  const addProblematicStep = () => {
    if (newProblematicStep.trim() && !formData.problematicSteps?.includes(newProblematicStep.trim())) {
      setFormData({
        ...formData,
        problematicSteps: [...(formData.problematicSteps || []), newProblematicStep.trim()]
      });
      setNewProblematicStep("");
    }
  };

  const removeProblematicStep = (step: string) => {
    setFormData({
      ...formData,
      problematicSteps: formData.problematicSteps?.filter(s => s !== step) || []
    });
  };

  const getStatusInfo = (status: ProcessingStatus) => {
    switch (status) {
      case ProcessingStatus.NotStarted:
        return { text: "Ch∆∞a b·∫Øt ƒë·∫ßu", color: "text-gray-600 bg-gray-100", icon: <FiClock className="text-gray-500" /> };
      case ProcessingStatus.InProgress:
        return { text: "ƒêang th·ª±c hi·ªán", color: "text-blue-600 bg-blue-100", icon: <FiClock className="text-blue-500" /> };
      case ProcessingStatus.AwaitingEvaluation:
        return { text: "Ch·ªù ƒë√°nh gi√°", color: "text-yellow-600 bg-yellow-100", icon: <FiAlertCircle className="text-yellow-500" /> };
      case ProcessingStatus.Completed:
        return { text: "Ho√†n th√†nh", color: "text-green-600 bg-green-100", icon: <FiCheckCircle className="text-green-500" /> };
      case ProcessingStatus.Cancelled:
        return { text: "ƒê√£ h·ªßy", color: "text-red-600 bg-red-100", icon: <FiAlertCircle className="text-red-500" /> };
      default:
        return { text: "Kh√¥ng x√°c ƒë·ªãnh", color: "text-gray-600 bg-gray-100", icon: <FiAlertCircle className="text-gray-500" /> };
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4"></div>
          <p className="text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    );
  }

  if (error || !batch) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <FiAlertCircle className="text-red-500 text-4xl mx-auto mb-4" />
          <p className="text-red-600 mb-4">{error || "Kh√¥ng t√¨m th·∫•y l√¥ s∆° ch·∫ø"}</p>
          <button
            onClick={() => router.back()}
            className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
          >
            Quay l·∫°i
          </button>
        </div>
      </div>
    );
  }

  const statusInfo = getStatusInfo(batch.status);
  const latestEvaluation = evaluations.length > 0 ? evaluations[0] : null;

  return (
    <div className="p-6 bg-orange-50 min-h-screen">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={() => router.back()}
            className="flex items-center gap-2 text-orange-600 hover:text-orange-700 mb-4 transition-colors"
          >
            <FiArrowLeft />
            Quay l·∫°i
          </button>
          
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-800 mb-2">Chi ti·∫øt l√¥ s∆° ch·∫ø</h1>
              <p className="text-gray-600">M√£ l√¥: {batch.batchCode}</p>
            </div>
            
                                                   {(batch.status === ProcessingStatus.AwaitingEvaluation || 
                batch.status === ProcessingStatus.Completed || 
                batch.status === ProcessingStatus.InProgress) && (
                <div className="flex flex-col gap-2">
                  {batch.status === ProcessingStatus.InProgress && (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                      <p className="text-sm text-blue-700">
                        <strong>L∆∞u √Ω:</strong> L√¥ n√†y ƒëang trong qu√° tr√¨nh x·ª≠ l√Ω. B·∫°n c√≥ th·ªÉ t·∫°o ƒë√°nh gi√° t·∫°m th·ªùi.
                      </p>
                    </div>
                  )}
                </div>
              )}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Batch Information */}
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4">Th√¥ng tin l√¥ s∆° ch·∫ø</h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div className="flex items-center gap-3">
                    <FiPackage className="text-orange-500" />
                    <div>
                      <p className="text-sm text-gray-600">M√£ l√¥</p>
                      <p className="font-medium text-gray-900">{batch.batchCode}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <FiUser className="text-orange-500" />
                    <div>
                      <p className="text-sm text-gray-600">N√¥ng d√¢n</p>
                      <p className="font-medium text-gray-900">{batch.farmerName}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <FiCalendar className="text-orange-500" />
                    <div>
                      <p className="text-sm text-gray-600">M√πa v·ª•</p>
                      <p className="font-medium text-gray-900">{batch.cropSeasonName}</p>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <div className="flex items-center gap-3">
                    <FiBarChart2 className="text-orange-500" />
                    <div>
                      <p className="text-sm text-gray-600">Kh·ªëi l∆∞·ª£ng ƒë·∫ßu v√†o</p>
                      <p className="font-medium text-gray-900">{batch.totalInputQuantity} kg</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <FiBarChart2 className="text-orange-500" />
                    <div>
                      <p className="text-sm text-gray-600">Kh·ªëi l∆∞·ª£ng ƒë·∫ßu ra</p>
                      <p className="font-medium text-gray-900">{batch.totalOutputQuantity} kg</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <div className="w-5 h-5 flex items-center justify-center">
                      {statusInfo.icon}
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Tr·∫°ng th√°i</p>
                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${statusInfo.color}`}>
                        {statusInfo.text}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Progresses */}
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4">Ti·∫øn tr√¨nh s∆° ch·∫ø</h2>
              
              {batch.progresses && batch.progresses.length > 0 ? (
                <div className="space-y-4">
                  {batch.progresses.map((progress, index) => (
                    <div key={progress.progressId} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-medium text-gray-900">
                          B∆∞·ªõc {index + 1}: {progress.stageName}
                        </h3>
                        <span className="text-sm text-gray-500">
                          {progress.progressDate ? new Date(progress.progressDate).toLocaleDateString('vi-VN') : 'Ch∆∞a b·∫Øt ƒë·∫ßu'}
                        </span>
                      </div>
                      
                      <p className="text-sm text-gray-600 mb-2">{progress.stageDescription}</p>
                      
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <span className="text-gray-500">S·∫£n l∆∞·ª£ng:</span>
                          <span className="ml-2 font-medium">{progress.outputQuantity} {progress.outputUnit}</span>
                        </div>
                        <div>
                          <span className="text-gray-500">C·∫≠p nh·∫≠t b·ªüi:</span>
                          <span className="ml-2 font-medium">{progress.updatedByName}</span>
                        </div>
                      </div>
                      

                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 text-center py-8">Ch∆∞a c√≥ ti·∫øn tr√¨nh n√†o ƒë∆∞·ª£c ghi nh·∫≠n</p>
              )}
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
                         {/* Evaluation Status */}
             <div className="bg-white rounded-xl shadow-sm p-6">
               <h2 className="text-xl font-semibold text-gray-800 mb-4">Tr·∫°ng th√°i ƒë√°nh gi√°</h2>
               
                               {latestEvaluation ? (
                  <div className="space-y-4">
                    <div className="flex items-center gap-3">
                      <span className={`px-3 py-1 text-sm font-medium rounded-full ${getEvaluationResultColor(latestEvaluation.evaluationResult)}`}>
                        {getEvaluationResultDisplayName(latestEvaluation.evaluationResult)}
                      </span>
                    </div>
                    
                                                              {/* üîß C·∫¢I THI·ªÜN: Hi·ªÉn th·ªã th√¥ng tin failure ch·ªâ khi ƒë√°nh gi√° kh√¥ng ƒë·∫°t */}
                      {latestEvaluation.comments && latestEvaluation.evaluationResult === EVALUATION_RESULTS.FAIL && (
                        <div>
                          <p className="text-sm text-gray-600 mb-2">Nh·∫≠n x√©t:</p>
                                                     <StageFailureDisplay comments={latestEvaluation.comments} batch={batch} />
                          
                          {/* üîß C·∫¢I THI·ªÜN: Hi·ªÉn th·ªã tr·∫°ng th√°i retry c·ªßa farmer */}
                          <FarmerRetryStatus 
                            evaluation={latestEvaluation} 
                            batch={batch}
                          />
                          
                          {/* üîß C·∫¢I THI·ªÜN: Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n retry */}
                          <RetryGuidanceInfo 
                            evaluation={latestEvaluation} 
                            batch={batch}
                          />
                        </div>
                      )}
                      
                      {/* üîß C·∫¢I THI·ªÜN: Hi·ªÉn th·ªã comments th√¥ng th∆∞·ªùng cho ƒë√°nh gi√° ƒë·∫°t */}

                    
                    {/* üîß C·∫¢I THI·ªÜN: Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt kh√°c */}
                    {latestEvaluation.detailedFeedback && (
                      <div>
                        <p className="text-sm text-gray-600 mb-1">Ph·∫£n h·ªìi chi ti·∫øt:</p>
                        <p className="text-sm text-gray-900 bg-gray-50 p-2 rounded">
                          {latestEvaluation.detailedFeedback}
                        </p>
                      </div>
                    )}
                    
                    {latestEvaluation.recommendations && (
                      <div>
                        <p className="text-sm text-gray-600 mb-1">Khuy·∫øn ngh·ªã:</p>
                        <p className="text-sm text-gray-900 bg-green-50 p-2 rounded">
                          {latestEvaluation.recommendations}
                        </p>
                      </div>
                    )}
                    
                    {latestEvaluation.evaluatedAt && (
                      <div>
                        <p className="text-sm text-gray-600 mb-1">Ng√†y ƒë√°nh gi√°:</p>
                        <p className="text-sm text-gray-900">
                          {new Date(latestEvaluation.evaluatedAt).toLocaleDateString('vi-VN')}
                        </p>
                      </div>
                    )}
                    
                    {/* üîß C·∫¢I THI·ªÜN: Hi·ªÉn th·ªã ng∆∞·ªùi ƒë√°nh gi√° n·∫øu c√≥ */}
                    {latestEvaluation.evaluatedBy && (
                      <div>
                        <p className="text-sm text-gray-600 mb-1">ƒê√°nh gi√° b·ªüi:</p>
                        <p className="text-sm text-gray-900">
                          {latestEvaluation.expertName || latestEvaluation.evaluatedBy}
                        </p>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="text-center py-4">
                    <FiAlertCircle className="text-yellow-500 text-2xl mx-auto mb-2" />
                    <p className="text-sm text-gray-600 mb-4">Ch∆∞a c√≥ ƒë√°nh gi√°</p>
                  </div>
                )}
             </div>

                         {/* Actions */}
             <div className="bg-white rounded-xl shadow-sm p-6">
               <h2 className="text-xl font-semibold text-gray-800 mb-4">H√†nh ƒë·ªông</h2>
               
               <div className="space-y-3">
                 <button
                   onClick={() => setShowEvaluationForm(true)}
                   className="w-full px-4 py-3 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors flex items-center justify-center gap-2"
                 >
                   <FiSave />
                   C·∫≠p nh·∫≠t ƒë√°nh gi√°
                 </button>
                 
                 <button
                   onClick={() => router.back()}
                   className="w-full px-4 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors flex items-center justify-center gap-2"
                 >
                   <FiArrowLeft />
                   Quay l·∫°i danh s√°ch
                 </button>
               </div>
             </div>

             {/* Evaluation History */}
             {evaluations.length > 1 && (
               <div className="bg-white rounded-xl shadow-sm p-6">
                 <h2 className="text-xl font-semibold text-gray-800 mb-4">L·ªãch s·ª≠ ƒë√°nh gi√°</h2>
                 
                 <div className="space-y-3">
                   {evaluations.slice(1).map((evaluation, index) => (
                     <div key={`${evaluation.evaluationId}-${index}`} className="border-l-2 border-gray-200 pl-4">
                       <div className="flex items-center gap-2 mb-1">
                         <span className={`px-2 py-1 text-xs font-medium rounded-full ${getEvaluationResultColor(evaluation.evaluationResult)}`}>
                           {getEvaluationResultDisplayName(evaluation.evaluationResult)}
                         </span>
                         <span className="text-xs text-gray-500">
                           {evaluation.evaluatedAt ? new Date(evaluation.evaluatedAt).toLocaleDateString('vi-VN') : 'Ch∆∞a c√≥ ng√†y'}
                         </span>
                       </div>
                       
                                               {evaluation.comments && (
                          <div className="mt-2">
                            {/* Hi·ªÉn th·ªã failure info n·∫øu l√† failure comment */}
                                                         {evaluation.evaluationResult === EVALUATION_RESULTS.FAIL && (
                               <StageFailureDisplay comments={evaluation.comments} batch={batch} />
                             )}
                            
                            {/* Hi·ªÉn th·ªã comments th√¥ng th∆∞·ªùng n·∫øu kh√¥ng ph·∫£i failure */}
                            {evaluation.evaluationResult !== EVALUATION_RESULTS.FAIL && (
                              <div className="bg-gray-50 rounded-lg p-2">
                                <p className="text-xs text-gray-700">{evaluation.comments}</p>
                              </div>
                            )}
                            
                            {/* Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt n·∫øu c√≥ */}
                            {evaluation.detailedFeedback && (
                              <div className="mt-2 bg-blue-50 rounded-lg p-2">
                                <p className="text-xs text-blue-700">
                                  <strong>Chi ti·∫øt:</strong> {evaluation.detailedFeedback}
                                </p>
                              </div>
                            )}
                            
                            {evaluation.recommendations && (
                              <div className="mt-2 bg-green-50 rounded-lg p-2">
                                <p className="text-xs text-green-700">
                                  <strong>Khuy·∫øn ngh·ªã:</strong> {evaluation.recommendations}
                                </p>
                              </div>
                            )}
                          </div>
                        )}
                        
                        {/* üîß C·∫¢I THI·ªÜN: Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi ƒë√°nh gi√° */}
                        {evaluation.evaluatedBy && (
                          <div className="mt-2 text-xs text-gray-500">
                            <span className="font-medium">ƒê√°nh gi√° b·ªüi:</span> {evaluation.expertName || evaluation.evaluatedBy}
                          </div>
                        )}
                     </div>
                   ))}
                 </div>
               </div>
             )}
          </div>
        </div>

        {/* Evaluation Form Modal */}
        <Dialog.Root open={showEvaluationForm} onOpenChange={setShowEvaluationForm}>
          <Dialog.Portal>
            <Dialog.Overlay className="fixed inset-0 bg-black bg-opacity-50 z-50" />
            <Dialog.Content className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-xl shadow-xl p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto z-50">
              <div className="flex items-center justify-between mb-6">
                <Dialog.Title className="text-2xl font-bold text-gray-800">
                  C·∫≠p nh·∫≠t ƒë√°nh gi√° cho l√¥ {batch.batchCode}
                </Dialog.Title>
                <button
                  onClick={() => setShowEvaluationForm(false)}
                  className="text-gray-400 hover:text-gray-600 transition-colors"
                >
                  <FiX className="w-6 h-6" />
                </button>
              </div>
              
                             <form onSubmit={handleSubmit} className="space-y-6">
                 {/* Batch Status Info */}
                 {batch.status === ProcessingStatus.InProgress && (
                   <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                     <div className="flex items-center gap-2">
                       <FiClock className="w-5 h-5 text-blue-600" />
                       <div>
                         <h4 className="text-sm font-medium text-blue-900">L√¥ ƒëang trong qu√° tr√¨nh x·ª≠ l√Ω</h4>
                         <p className="text-sm text-blue-700">
                           B·∫°n c√≥ th·ªÉ t·∫°o ƒë√°nh gi√° t·∫°m th·ªùi ƒë·ªÉ h∆∞·ªõng d·∫´n n√¥ng d√¢n c·∫£i thi·ªán qu√° tr√¨nh.
                         </p>
                       </div>
                     </div>
                   </div>
                 )}
                 
                 {/* Evaluation Result */}
                 <div className="bg-gradient-to-r from-orange-50 to-red-50 p-4 rounded-lg border border-orange-200">
                  <label className="block text-sm font-semibold text-gray-700 mb-3">
                    K·∫øt qu·∫£ ƒë√°nh gi√° *
                  </label>
                  <select
                    value={formData.evaluationResult}
                    onChange={(e) => setFormData({ ...formData, evaluationResult: e.target.value })}
                    className="w-full px-4 py-3 border border-orange-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 bg-white font-medium"
                    required
                  >
                    <option value={EVALUATION_RESULTS.PASS}>‚úÖ ƒê·∫°t - Ch·∫•t l∆∞·ª£ng t·ªët</option>
                    <option value={EVALUATION_RESULTS.FAIL}>‚ùå Kh√¥ng ƒë·∫°t - C·∫ßn x·ª≠ l√Ω l·∫°i</option>
                    <option value={EVALUATION_RESULTS.NEEDS_IMPROVEMENT}>‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán - Ch·∫•t l∆∞·ª£ng ch∆∞a ƒë·∫°t chu·∫©n</option>
                    <option value={EVALUATION_RESULTS.TEMPORARY}>‚è≥ T·∫°m th·ªùi - Ch·ªù ƒë√°nh gi√° th√™m</option>
                  </select>
                </div>

                                 {/* Problematic Steps - Ch·ªâ hi·ªÉn th·ªã khi Fail */}
                 {formData.evaluationResult === EVALUATION_RESULTS.FAIL && (
                   <div className="bg-gradient-to-r from-red-50 to-orange-50 p-4 rounded-lg border border-red-200">
                     <label className="block text-sm font-semibold text-red-700 mb-3">
                       üîç Ti·∫øn tr√¨nh c√≥ v·∫•n ƒë·ªÅ *
                     </label>
                     <p className="text-sm text-red-600 mb-4">
                       Ch·ªçn c√°c ti·∫øn tr√¨nh c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω l·∫°i ƒë·ªÉ x√°c ƒë·ªãnh ch√≠nh x√°c v·∫•n ƒë·ªÅ
                     </p>
                     {(!formData.problematicSteps || formData.problematicSteps.length === 0) && (
                       <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4">
                         <p className="text-sm text-yellow-700">
                           ‚ö†Ô∏è <strong>B·∫Øt bu·ªôc:</strong> Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ti·∫øn tr√¨nh c√≥ v·∫•n ƒë·ªÅ khi ƒë√°nh gi√° kh√¥ng ƒë·∫°t.
                         </p>
                       </div>
                     )}
                    <div className="space-y-4">
                      {/* Add new step */}
                      <div className="flex gap-2">
                        <select
                          value={newProblematicStep}
                          onChange={(e) => setNewProblematicStep(e.target.value)}
                          className="flex-1 px-4 py-3 border border-red-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white"
                        >
                          <option value="">Ch·ªçn ti·∫øn tr√¨nh c√≥ v·∫•n ƒë·ªÅ...</option>
                          {batch.progresses && batch.progresses.map((progress, index) => (
                            <option key={progress.progressId} value={`B∆∞·ªõc ${index + 1}: ${progress.stageName}`}>
                              B∆∞·ªõc {index + 1} (OrderIndex: {index + 1}): {progress.stageName}
                            </option>
                          ))}
                        </select>
                        <button
                          type="button"
                          onClick={addProblematicStep}
                          disabled={!newProblematicStep}
                          className="px-4 py-3 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors flex items-center gap-2 font-medium disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          <FiPlus className="w-4 h-4" />
                          Th√™m
                        </button>
                      </div>
                      
                                             {/* Display added steps */}
                       {formData.problematicSteps && formData.problematicSteps.length > 0 && (
                         <div className="space-y-3">
                           <p className="text-sm font-medium text-red-700">C√°c ti·∫øn tr√¨nh ƒë√£ ch·ªçn:</p>
                           <div className="space-y-2">
                             {formData.problematicSteps.map((step, index) => (
                               <div key={`step-${step}-${index}`} className="flex items-center justify-between bg-white px-4 py-3 rounded-lg border border-red-200 shadow-sm">
                                 <div className="flex items-center gap-3">
                                   <span className="w-8 h-8 bg-red-100 text-red-600 rounded-full flex items-center justify-center text-sm font-bold">
                                     {index + 1}
                                   </span>
                                   <div>
                                     <span className="text-sm font-semibold text-gray-800 block">{step}</span>
                                     <span className="text-xs text-gray-500">Ti·∫øn tr√¨nh c·∫ßn x·ª≠ l√Ω l·∫°i</span>
                                   </div>
                                 </div>
                                 <button
                                   type="button"
                                   onClick={() => removeProblematicStep(step)}
                                   className="text-red-500 hover:text-red-700 transition-colors p-2 hover:bg-red-50 rounded-lg"
                                   title="X√≥a ti·∫øn tr√¨nh n√†y"
                                 >
                                   <FiX className="w-5 h-5" />
                                 </button>
                               </div>
                             ))}
                           </div>
                           <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                             <p className="text-sm text-blue-700">
                               <strong>L∆∞u √Ω:</strong> C√°c ti·∫øn tr√¨nh n√†y s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn n√¥ng d√¢n ƒë·ªÉ h·ªç bi·∫øt c·∫ßn x·ª≠ l√Ω l·∫°i nh·ªØng b∆∞·ªõc n√†o.
                             </p>
                           </div>
                         </div>
                       )}
                    </div>
                  </div>
                )}
                
                                 {/* Comments */}
                 <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-lg border border-blue-200">
                   <label className="block text-sm font-semibold text-gray-700 mb-3">
                     üí¨ Nh·∫≠n x√©t t·ªïng quan
                   </label>
                   <textarea
                     value={formData.comments || ""}
                     onChange={(e) => setFormData({ ...formData, comments: e.target.value })}
                     rows={3}
                     className="w-full px-4 py-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white"
                     placeholder="Nh·∫≠p nh·∫≠n x√©t t·ªïng quan v·ªÅ ch·∫•t l∆∞·ª£ng s∆° ch·∫ø..."
                   />
                 </div>
                 
                 {/* Detailed Feedback */}
                 <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-4 rounded-lg border border-purple-200">
                   <label className="block text-sm font-semibold text-gray-700 mb-3">
                     üîç Ph·∫£n h·ªìi chi ti·∫øt
                   </label>
                   <textarea
                     value={formData.detailedFeedback || ""}
                     onChange={(e) => setFormData({ ...formData, detailedFeedback: e.target.value })}
                     rows={4}
                     className="w-full px-4 py-3 border border-purple-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 bg-white"
                     placeholder="M√¥ t·∫£ chi ti·∫øt c√°c v·∫•n ƒë·ªÅ ho·∫∑c ƒëi·ªÉm t·ªët trong qu√° tr√¨nh s∆° ch·∫ø..."
                   />
                 </div>
                 
                 {/* Recommendations */}
                 <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-4 rounded-lg border border-green-200">
                   <label className="block text-sm font-semibold text-gray-700 mb-3">
                     üí° Khuy·∫øn ngh·ªã c·∫£i thi·ªán
                   </label>
                   <textarea
                     value={formData.recommendations || ""}
                     onChange={(e) => setFormData({ ...formData, recommendations: e.target.value })}
                     rows={3}
                     className="w-full px-4 py-3 border border-green-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-white"
                     placeholder="ƒê∆∞a ra c√°c khuy·∫øn ngh·ªã ƒë·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng..."
                   />
                 </div>
                 
                 {/* Additional Notes */}
                 <div className="bg-gradient-to-r from-gray-50 to-slate-50 p-4 rounded-lg border border-gray-200">
                   <label className="block text-sm font-semibold text-gray-700 mb-3">
                     üìù Ghi ch√∫ b·ªï sung
                   </label>
                   <textarea
                     value={formData.additionalNotes || ""}
                     onChange={(e) => setFormData({ ...formData, additionalNotes: e.target.value })}
                     rows={2}
                     className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gray-500 focus:border-gray-500 bg-white"
                     placeholder="Ghi ch√∫ b·ªï sung cho ƒë√°nh gi√°..."
                   />
                 </div>
                
                {/* Action Buttons */}
                <div className="flex gap-3 pt-4">
                  <button
                    type="button"
                    onClick={() => setShowEvaluationForm(false)}
                    className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    H·ªßy
                  </button>
                  <button
                    type="submit"
                    disabled={submitting}
                    className="flex-1 px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors disabled:opacity-50"
                  >
                    {submitting ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t ƒë√°nh gi√°"}
                  </button>
                </div>
              </form>
            </Dialog.Content>
          </Dialog.Portal>
        </Dialog.Root>
      </div>
    </div>
  );
}
