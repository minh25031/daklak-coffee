"use client";

import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { getAllProcessingBatches, ProcessingBatch } from "@/lib/api/processingBatches";
import { createProcessingBatchProgressWithMedia } from "@/lib/api/processingBatchProgress";
import { getProcessingStagesByMethodId, ProcessingStage } from "@/lib/api/processingStages";
import imageCompression from "browser-image-compression";
import { ProcessingStatus } from "@/lib/constants/batchStatus";
import MediaUploadSection from "./MediaUploadSection";
import { AlertCircle, Plus, X, Calendar, Scale, Settings, Package, PlayCircle } from "lucide-react";

type Props = {
  defaultBatchId?: string; 
  defaultBatchData?: ProcessingBatch; // Th√™m prop ƒë·ªÉ truy·ªÅn th√¥ng tin batch
  onSuccess?: () => void;
};

export default function CreateProcessingProgressForm({ 
  defaultBatchId = "", 
  defaultBatchData,
  onSuccess 
}: Props) {
  const router = useRouter();
  const [batches, setBatches] = useState<ProcessingBatch[]>([]);
  const [stages, setStages] = useState<ProcessingStage[]>([]);
  const [selectedBatch, setSelectedBatch] = useState<ProcessingBatch | null>(null);
  const [loading, setLoading] = useState(false);
  const [loadingStages, setLoadingStages] = useState(false);
  const [form, setForm] = useState({
    batchId: defaultBatchId,
    progressDate: new Date().toISOString().split("T")[0], // M·∫∑c ƒë·ªãnh h√¥m nay
    outputQuantity: 0,
    outputUnit: "kg",
    photoFiles: [] as File[],
    videoFiles: [] as File[],
    parameters: [{ name: "", value: "", unit: "" }] as Array<{ name: string; value: string; unit: string }>,
    recordedAt: new Date().toISOString(),
  });
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  useEffect(() => {
    const fetchBatches = async () => {
      try {
        console.log("üîç DEBUG: Fetching batches for create progress form...");
        const res = await getAllProcessingBatches();
        console.log("üîç DEBUG: All batches:", res);
        
        const filtered = (res || []).filter((b) => 
          b.status === ProcessingStatus.NotStarted || 
          b.status === ProcessingStatus.InProgress || 
          b.status === ProcessingStatus.AwaitingEvaluation
        );
        
        console.log("üîç DEBUG: Filtered batches:", filtered);
        console.log("üîç DEBUG: Available statuses:", filtered.map(b => ({ batchCode: b.batchCode, status: b.status })));
        
        setBatches(filtered);

        // N·∫øu c√≥ defaultBatchId, t·ª± ƒë·ªông select v√† load stage
        if (defaultBatchId) {
          console.log("üîç DEBUG: Auto-selecting batch:", defaultBatchId);
          const targetBatch = filtered.find((b: ProcessingBatch) => b.batchId === defaultBatchId);
          if (targetBatch) {
            console.log("üîç DEBUG: Found target batch:", targetBatch);
            setSelectedBatch(targetBatch);
            setForm(prev => ({ ...prev, batchId: defaultBatchId }));
            fetchStagesForBatch(targetBatch.methodId);
          } else {
            console.log("üîç DEBUG: Target batch not found in filtered batches, using defaultBatchData");
            // S·ª≠ d·ª•ng defaultBatchData n·∫øu c√≥, ho·∫∑c t·∫°o t·ª´ context
            if (defaultBatchData) {
              console.log("üîç DEBUG: Using defaultBatchData:", defaultBatchData);
              setSelectedBatch(defaultBatchData);
              setForm(prev => ({ ...prev, batchId: defaultBatchId }));
              fetchStagesForBatch(defaultBatchData.methodId);
            } else {
              console.log("üîç DEBUG: No defaultBatchData, creating from context");
              const contextBatch = {
                batchId: defaultBatchId,
                batchCode: `BATCH-${defaultBatchId}`,
                status: ProcessingStatus.NotStarted,
                methodId: 1, // Default method ID
                methodName: "S∆° ch·∫ø Kh√¥" // Default method name
              } as ProcessingBatch;
              setSelectedBatch(contextBatch);
              setForm(prev => ({ ...prev, batchId: defaultBatchId }));
              fetchStagesForBatch(contextBatch.methodId);
            }
          }
        }
      } catch (error) {
        console.error("‚ùå Error fetching batches:", error);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch l√¥ ch·∫ø bi·∫øn");
      }
    };
    fetchBatches();
  }, [defaultBatchId]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      [name]: name === "outputQuantity" ? Number(value) : value,
    }));

    // N·∫øu ch·ªçn batch, l·∫•y th√¥ng tin stage
    if (name === "batchId") {
      if (value) {
        const selectedBatch = batches.find(b => b.batchId === value);
        if (selectedBatch) {
          setSelectedBatch(selectedBatch);
          fetchStagesForBatch(selectedBatch.methodId);
        }
      } else {
        // N·∫øu kh√¥ng ch·ªçn l√¥ n√†o, reset
        setSelectedBatch(null);
        setStages([]);
      }
    }
  };

  const fetchStagesForBatch = async (methodId: number) => {
    try {
      setLoadingStages(true);
      console.log("üîç DEBUG: Fetching stages for methodId:", methodId);
      const stagesData = await getProcessingStagesByMethodId(methodId);
      console.log("üîç DEBUG: Stages data:", stagesData);
      setStages(stagesData || []);
    } catch (error) {
      console.error("‚ùå Error fetching stages:", error);
      setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b∆∞·ªõc ch·∫ø bi·∫øn");
      setStages([]);
    } finally {
      setLoadingStages(false);
    }
  };

  const handleParameterChange = (index: number, field: 'name' | 'value' | 'unit', value: string) => {
    const newParameters = [...form.parameters];
    newParameters[index][field] = value;
    setForm(prev => ({ ...prev, parameters: newParameters }));
  };

  const addParameter = () => {
    setForm(prev => ({
      ...prev,
      parameters: [...prev.parameters, { name: "", value: "", unit: "" }]
    }));
  };

  const removeParameter = (index: number) => {
    if (form.parameters.length > 1) {
      const newParameters = form.parameters.filter((_, i) => i !== index);
      setForm(prev => ({ ...prev, parameters: newParameters }));
    }
  };

  const handlePhotoFilesChange = (files: File[]) => {
    setForm(prev => ({ ...prev, photoFiles: files }));
  };

  const handleVideoFilesChange = (files: File[]) => {
    setForm(prev => ({ ...prev, videoFiles: files }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log("DEBUG: Form submitted");
    setLoading(true);
    setError("");
    setSuccess("");

    // Validation
    if (!form.batchId) {
      setError("Vui l√≤ng ch·ªçn l√¥ ch·∫ø bi·∫øn");
      setLoading(false);
      return;
    }

    if (!form.progressDate) {
      setError("Vui l√≤ng ch·ªçn ng√†y th·ª±c hi·ªán");
      setLoading(false);
      return;
    }

    // Validate date kh√¥ng ƒë∆∞·ª£c trong t∆∞∆°ng lai
    const selectedDate = new Date(form.progressDate);
    const today = new Date();
    today.setHours(23, 59, 59, 999); // Set to end of today
    if (selectedDate > today) {
      setError("Ng√†y th·ª±c hi·ªán kh√¥ng ƒë∆∞·ª£c trong t∆∞∆°ng lai");
      setLoading(false);
      return;
    }

    if (form.outputQuantity <= 0) {
      setError("Kh·ªëi l∆∞·ª£ng ƒë·∫ßu ra ph·∫£i l·ªõn h∆°n 0");
      setLoading(false);
      return;
    }

    // Validate kh·ªëi l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c qu√° l·ªõn (v√≠ d·ª•: 100,000 kg)
    if (form.outputQuantity > 100000) {
      setError("Kh·ªëi l∆∞·ª£ng ƒë·∫ßu ra kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100,000");
      setLoading(false);
      return;
    }

    if (!form.outputUnit.trim()) {
      setError("Vui l√≤ng nh·∫≠p ƒë∆°n v·ªã");
      setLoading(false);
      return;
    }

    // File validation
    if (form.photoFiles.some(file => file.size > 10 * 1024 * 1024)) { // 10MB
      setError("·∫¢nh kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 10MB");
      setLoading(false);
      return;
    }

    if (form.videoFiles.some(file => file.size > 100 * 1024 * 1024)) { // 100MB
      setError("Video kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 100MB");
      setLoading(false);
      return;
    }

    // T√≠nh t·ªïng k√≠ch th∆∞·ªõc
    const totalPhotoSize = form.photoFiles.reduce((sum, file) => sum + file.size, 0);
    const totalVideoSize = form.videoFiles.reduce((sum, file) => sum + file.size, 0);
    const totalSize = totalPhotoSize + totalVideoSize;
    const totalSizeMB = totalSize / 1024 / 1024;

    console.log("üìä File size analysis:");
    console.log("  Photos:", form.photoFiles.length, "files,", (totalPhotoSize / 1024 / 1024).toFixed(2), "MB");
    console.log("  Videos:", form.videoFiles.length, "files,", (totalVideoSize / 1024 / 1024).toFixed(2), "MB");
    console.log("  Total:", totalSizeMB.toFixed(2), "MB");

    // Gi·ªõi h·∫°n t·ªïng k√≠ch th∆∞·ªõc (50MB)
    if (totalSizeMB > 50) {
      setError(`T·ªïng k√≠ch th∆∞·ªõc files (${totalSizeMB.toFixed(2)}MB) v∆∞·ª£t qu√° gi·ªõi h·∫°n 50MB`);
      setLoading(false);
      return;
    }

    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng files (10 files)
    const totalFiles = form.photoFiles.length + form.videoFiles.length;
    if (totalFiles > 10) {
      setError(`S·ªë l∆∞·ª£ng files (${totalFiles}) v∆∞·ª£t qu√° gi·ªõi h·∫°n 10 files`);
      setLoading(false);
      return;
    }

    try {
      let compressedPhotos: File[] = [];
      if (form.photoFiles.length > 0) {
        console.log("üì∑ Compressing", form.photoFiles.length, "photos...");
        for (const photo of form.photoFiles) {
          console.log("üì∑ K√≠ch th∆∞·ªõc ·∫£nh g·ªëc:", photo.size / 1024 / 1024, "MB");
          const compressedPhoto = await imageCompression(photo, {
            maxSizeMB: 0.5,
            maxWidthOrHeight: 1000,
            useWebWorker: true,
          });
          console.log("üì∑ K√≠ch th∆∞·ªõc ·∫£nh sau n√©n:", compressedPhoto.size / 1024 / 1024, "MB");
          
          // T·∫°o file m·ªõi v·ªõi t√™n g·ªëc
          const compressedFile = new File([compressedPhoto], photo.name, {
            type: compressedPhoto.type,
            lastModified: Date.now(),
          });
          compressedPhotos.push(compressedFile);
        }
      }

      // L·∫•y th√¥ng s·ªë k·ªπ thu·∫≠t ƒë·∫ßu ti√™n (n·∫øu c√≥)
      const firstParameter = form.parameters[0];
      const parameterName = firstParameter.name.trim();
      const parameterValue = firstParameter.value.trim();
      const unit = firstParameter.unit.trim();

      console.log("üöÄ Submitting with data:", {
        batchId: form.batchId,
        progressDate: form.progressDate,
        outputQuantity: form.outputQuantity,
        outputUnit: form.outputUnit,
        photoCount: compressedPhotos.length,
        hasVideo: !!form.videoFiles.length,
        parameterName,
        parameterValue,
        unit
      });

      // T·∫°o array t·∫•t c·∫£ files ƒë·ªÉ g·ª≠i
      const allFiles = [...compressedPhotos];
      if (form.videoFiles.length > 0) {
        allFiles.push(...form.videoFiles);
      }

      await createProcessingBatchProgressWithMedia(form.batchId, {
        stageId: undefined, // ƒê·ªÉ Backend t·ª± ƒë·ªông x√°c ƒë·ªãnh stage ƒë·∫ßu ti√™n
        progressDate: form.progressDate,
        outputQuantity: form.outputQuantity,
        outputUnit: form.outputUnit,
        photoFiles: compressedPhotos,
        videoFiles: form.videoFiles,
        parameterName: parameterName || undefined,
        parameterValue: parameterValue || undefined,
        unit: unit || undefined,
        recordedAt: form.recordedAt || undefined,
      });

      setSuccess("T·∫°o ti·∫øn tr√¨nh th√†nh c√¥ng!");
      onSuccess?.();
      setTimeout(() => router.push("/dashboard/farmer/processing/progresses"), 1200);
    } catch (err: any) {
      console.error("‚ùå Submit error:", err);
      console.error("‚ùå Error type:", typeof err);
      console.error("‚ùå Error message:", err?.message);
      console.error("‚ùå Error response:", err?.response);
      console.error("‚ùå Error stack:", err?.stack);
      
      if (err.message === "Network Error" || (err.message && err.message.includes("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi"))) {
        setError("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi ho·∫∑c th·ª≠ l·∫°i sau.");
      } else {
        const errorMessage = err?.response?.data?.message || err?.message || "T·∫°o ti·∫øn tr√¨nh th·∫•t b·∫°i!";
        setError(errorMessage);
      }
    }
    setLoading(false);
  };


  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">T·∫°o ti·∫øn tr√¨nh ƒë·∫ßu ti√™n</h2>
        <p className="text-sm text-gray-600">B·∫Øt ƒë·∫ßu quy tr√¨nh ch·∫ø bi·∫øn c√† ph√™</p>
      </div>

             <form onSubmit={handleSubmit} className="space-y-6">
         {/* Batch Selection - Ch·ªâ hi·ªÉn th·ªã khi kh√¥ng c√≥ defaultBatchId */}
         {!defaultBatchId && (
           <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-6">
             <div className="flex items-center gap-3 mb-4">
               <div className="p-2 bg-blue-100 rounded-lg">
                 <Package className="w-5 h-5 text-blue-600" />
               </div>
               <div>
                 <h3 className="text-lg font-semibold text-gray-900">Ch·ªçn l√¥ ch·∫ø bi·∫øn</h3>
                 <p className="text-sm text-gray-600">L·ª±a ch·ªçn l√¥ c√† ph√™ ƒë·ªÉ b·∫Øt ƒë·∫ßu ch·∫ø bi·∫øn</p>
               </div>
             </div>

             {batches.length === 0 ? (
               <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                 <div className="flex items-start gap-3">
                   <div className="flex-shrink-0">
                     <AlertCircle className="w-5 h-5 text-yellow-600" />
                   </div>
                   <div>
                     <p className="text-sm font-medium text-yellow-800">Kh√¥ng c√≥ l√¥ ch·∫ø bi·∫øn kh·∫£ d·ª•ng</p>
                     <p className="text-xs text-yellow-700 mt-1">
                       Ch·ªâ hi·ªÉn th·ªã l√¥ c√≥ tr·∫°ng th√°i: Ch∆∞a b·∫Øt ƒë·∫ßu, ƒêang x·ª≠ l√Ω, ho·∫∑c Ch·ªù ƒë√°nh gi√°
                     </p>
                   </div>
                 </div>
               </div>
             ) : (
               <div>
                 <select
                   name="batchId"
                   value={form.batchId}
                   onChange={handleChange}
                   required
                   className="w-full border border-gray-300 px-4 py-3 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white hover:border-blue-300 transition-all duration-200 shadow-sm"
                 >
                   <option value="">-- Ch·ªçn l√¥ ch·∫ø bi·∫øn --</option>
                   {batches.map((b) => (
                     <option key={b.batchId} value={b.batchId}>
                       {b.batchCode} - {b.status}
                     </option>
                   ))}
                 </select>
               </div>
             )}
           </div>
         )}

        {/* Stage Information */}
        {selectedBatch && (
          <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl p-6">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 bg-green-100 rounded-lg">
                <PlayCircle className="w-5 h-5 text-green-600" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900">Th√¥ng tin b∆∞·ªõc ch·∫ø bi·∫øn</h3>
                <p className="text-sm text-gray-600">B∆∞·ªõc ƒë·∫ßu ti√™n trong quy tr√¨nh</p>
              </div>
            </div>
            
            {loadingStages ? (
              <div className="bg-white rounded-lg p-4 border border-green-200">
                <div className="flex items-center justify-center py-4">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-600"></div>
                  <span className="ml-2 text-gray-600">ƒêang t·∫£i th√¥ng tin b∆∞·ªõc ch·∫ø bi·∫øn...</span>
                </div>
              </div>
            ) : stages.length > 0 ? (
              <div className="bg-white rounded-lg p-4 border border-green-200">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900 text-lg">
                      B∆∞·ªõc {stages[0]?.orderIndex || 1}: {stages[0]?.stageName || "B∆∞·ªõc ƒë·∫ßu ti√™n"}
                    </h4>
                    <p className="text-sm text-gray-600 mt-1">
                      c·ªßa ph∆∞∆°ng ph√°p <span className="font-medium text-gray-800">{selectedBatch.methodName || "Ch·∫ø bi·∫øn"}</span>
                    </p>
                  </div>
                  <div className="text-right">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                      B∆∞·ªõc {stages[0]?.orderIndex || 1}
                    </span>
                  </div>
                </div>
              </div>
            ) : (
              <div className="bg-white rounded-lg p-4 border border-green-200">
                <div className="text-center py-4">
                  <p className="text-gray-600">Kh√¥ng t√¨m th·∫•y th√¥ng tin b∆∞·ªõc ch·∫ø bi·∫øn</p>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Date and Quantity */}
        <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-purple-100 rounded-lg">
              <Calendar className="w-5 h-5 text-purple-600" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">Th√¥ng tin ti·∫øn tr√¨nh</h3>
              <p className="text-sm text-gray-600">Ng√†y th·ª±c hi·ªán v√† kh·ªëi l∆∞·ª£ng ƒë·∫ßu ra</p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                <Calendar className="w-4 h-4 text-green-600" />
                Ng√†y th·ª±c hi·ªán
              </label>
              <Input
                type="date"
                name="progressDate"
                value={form.progressDate}
                onChange={handleChange}
                required
                className="border-gray-300 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 hover:border-purple-300 transition-all duration-200 shadow-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                <Scale className="w-4 h-4 text-orange-600" />
                Kh·ªëi l∆∞·ª£ng ƒë·∫ßu ra
              </label>
              <div className="relative">
                <Input
                  type="number"
                  name="outputQuantity"
                  value={form.outputQuantity}
                  onChange={handleChange}
                  min={0}
                  step={0.01}
                  required
                  className="border-gray-300 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 pr-12 hover:border-purple-300 transition-all duration-200 shadow-sm"
                  placeholder="0"
                />
                <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <span className="text-gray-500 text-sm font-medium">{form.outputUnit}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Technical Parameters Section */}
        <div className="bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-amber-100 rounded-lg">
                <Settings className="w-5 h-5 text-amber-600" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900">Th√¥ng s·ªë k·ªπ thu·∫≠t</h3>
                <p className="text-sm text-gray-600">C√°c th√¥ng s·ªë ƒëo l∆∞·ªùng trong qu√° tr√¨nh ch·∫ø bi·∫øn</p>
              </div>
            </div>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={addParameter}
              className="flex items-center gap-1 text-xs bg-white hover:bg-amber-50 border-amber-300 text-amber-700"
            >
              <Plus className="w-3 h-3" />
              Th√™m th√¥ng s·ªë
            </Button>
          </div>
          
          <div className="space-y-4">
            {form.parameters.map((param, index) => (
              <div key={index} className="bg-white rounded-lg p-4 border border-amber-200 shadow-sm">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-xs font-medium text-gray-600 mb-1">T√™n th√¥ng s·ªë</label>
                    <Input
                      type="text"
                      value={param.name}
                      onChange={(e) => handleParameterChange(index, 'name', e.target.value)}
                      placeholder="VD: Nhi·ªát ƒë·ªô, ƒê·ªô ·∫©m..."
                      className="text-sm border-gray-300 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 hover:border-amber-300 transition-all duration-200"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-xs font-medium text-gray-600 mb-1">Gi√° tr·ªã</label>
                    <Input
                      type="text"
                      value={param.value}
                      onChange={(e) => handleParameterChange(index, 'value', e.target.value)}
                      placeholder="VD: 25, 80%..."
                      className="text-sm border-gray-300 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 hover:border-amber-300 transition-all duration-200"
                    />
                  </div>
                  
                  <div className="flex gap-2">
                    <div className="flex-1">
                      <label className="block text-xs font-medium text-gray-600 mb-1">ƒê∆°n v·ªã</label>
                      <Input
                        type="text"
                        value={param.unit}
                        onChange={(e) => handleParameterChange(index, 'unit', e.target.value)}
                        placeholder="VD: ¬∞C, %, kg..."
                        className="text-sm border-gray-300 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 hover:border-amber-300 transition-all duration-200"
                      />
                    </div>
                    {form.parameters.length > 1 && (
                      <div className="flex items-end">
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => removeParameter(index)}
                          className="px-3 py-2 text-red-600 hover:text-red-700 hover:bg-red-50 border-red-300"
                        >
                          <X className="w-4 h-4" />
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Media Upload Section */}
        <MediaUploadSection
          photoFiles={form.photoFiles}
          videoFiles={form.videoFiles}
          onPhotoFilesChange={handlePhotoFilesChange}
          onVideoFilesChange={handleVideoFilesChange}
        />

        {/* Error and Success Messages */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-3">
            <div className="flex items-center gap-2">
              <AlertCircle className="w-5 h-5 text-red-600" />
              <p className="text-red-700 text-sm font-medium">{error}</p>
            </div>
          </div>
        )}
        
        {success && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-3">
            <div className="flex items-center gap-2">
              <div className="w-5 h-5 bg-green-100 rounded-full flex items-center justify-center">
                <span className="text-green-600 text-xs">‚úì</span>
              </div>
              <p className="text-green-700 text-sm font-medium">{success}</p>
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex justify-end gap-4 pt-6 border-t border-gray-200">
          <Button 
            type="button" 
            variant="outline" 
            onClick={() => {
              console.log("DEBUG: Cancel button clicked");
              onSuccess?.();
            }}
            className="px-8 py-3 hover:bg-gray-50 border-gray-300 text-gray-700 font-medium transition-all duration-200"
          >
            Hu·ª∑
          </Button>
          <Button 
            type="submit" 
            disabled={loading}
            className="px-8 py-3 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed text-white font-medium shadow-lg hover:shadow-xl transition-all duration-200"
          >
            {loading ? "ƒêang l∆∞u..." : "T·∫°o ti·∫øn tr√¨nh"}
          </Button>
        </div>
      </form>
    </div>
  );
}
